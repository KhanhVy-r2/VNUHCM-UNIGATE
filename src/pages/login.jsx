import React, { useState } from 'react';
import { Link } from "react-router-dom";

export default function LoginForm() {
  // State ƒë·ªÉ l∆∞u d·ªØ li·ªáu form
  const [formData, setFormData] = useState({
    cccd: '', // Thay email b·∫±ng cccd
    password: '',
  });

  // State ƒë·ªÉ ki·ªÉm so√°t hi·ªÉn th·ªã m·∫≠t kh·∫©u
  const [showPassword, setShowPassword] = useState(false);

  // State ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o l·ªói
  const [errors, setErrors] = useState({});

  // State ƒë·ªÉ ki·ªÉm so√°t khi form ƒë∆∞·ª£c submit
  const [formSubmitted, setFormSubmitted] = useState(false);

  // H√†m x·ª≠ l√Ω thay ƒë·ªïi input
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });

    // X√≥a l·ªói c·ªßa tr∆∞·ªùng v·ª´a ƒë∆∞·ª£c c·∫≠p nh·∫≠t n·∫øu form ƒë√£ ƒë∆∞·ª£c submit tr∆∞·ªõc ƒë√≥
    if (formSubmitted) {
      setErrors((prev) => ({
        ...prev,
        [name]: '',
      }));
    }
  };

  // H√†m x√°c th·ª±c form
  const validateForm = () => {
    const newErrors = {};

    // Ki·ªÉm tra CCCD
    if (!formData.cccd) {
      newErrors.cccd = "Vui l√≤ng nh·∫≠p s·ªë CCCD";
    } else if (!/^\d{12}$/.test(formData.cccd)) {
      newErrors.cccd = "S·ªë CCCD ph·∫£i g·ªìm 12 ch·ªØ s·ªë v√† kh√¥ng ch·ª©a ch·ªØ c√°i";
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u
    if (!formData.password) {
      newErrors.password = "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u";
    } else if (/[ƒÉ√¢∆°√¥ƒë]/i.test(formData.password)) {
      newErrors.password = "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ch·ª©a c√°c k√Ω t·ª± ƒÉ, √¢, ∆°, √¥, ƒë";
    }

    return newErrors;
  };

  // H√†m x·ª≠ l√Ω submit form
  const handleSubmit = (e) => {
    e.preventDefault();
    setFormSubmitted(true);
    const validationErrors = validateForm();

    if (Object.keys(validationErrors).length === 0) {
      // X·ª≠ l√Ω ƒëƒÉng nh·∫≠p th√†nh c√¥ng
      alert('ƒêƒÉng nh·∫≠p th√†nh c√¥ng!');
      console.log('Form data submitted:', formData);
      // Reset form sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng
      setFormData({
        cccd: '',
        password: '',
      });
      setFormSubmitted(false);
      // ·ªû ƒë√¢y b·∫°n c√≥ th·ªÉ g·ª≠i API request ƒë·∫øn server
    } else {
      setErrors(validationErrors);
    }
  };

  // Quy·∫øt ƒë·ªãnh class cho input fields
  const getInputClassName = (fieldName) => {
    return `w-full p-3 rounded ${
      errors[fieldName]
        ? 'border-2 border-red-500 bg-red-50 text-red-700'
        : 'border border-gray-300 bg-white text-gray-800'
    } focus:ring-2 focus:ring-blue-500 focus:border-transparent`;
  };

  return (
    <div className="flex flex-col min-h-screen">
      {/* Header */}
      <header className="bg-[#0056B3] text-white px-6 py-4 flex justify-between items-center">
        <div className="font-bold text-lg">VNUHCM - UNIGATE</div>
        <div className="font-bold text-lg flex-grow text-center">ƒêƒÇNG NH·∫¨P T√ÄI KHO·∫¢N</div>
        <div>
          <Link to="/register" className="text-white hover:underline">
            Ch∆∞a c√≥ t√†i kho·∫£n? ƒêƒÉng k√Ω
          </Link>
        </div>
      </header>

      {/* Form Container */}
      <div className="flex-grow">
        <div className="max-w-3xl mx-auto my-6 bg-blue-50 p-8 rounded shadow-md w-full">
          <form onSubmit={handleSubmit}>
            {/* CCCD */}
            <div className="mb-4 flex items-start">
              <label className="w-32 text-gray-700 mt-3 font-medium">S·ªë CCCD</label>
              <div className="flex-grow">
                <input
                  type="text"
                  name="cccd"
                  className={getInputClassName('cccd')}
                  placeholder="Nh·∫≠p s·ªë CCCD"
                  value={formData.cccd}
                  onChange={handleChange}
                />
                {errors.cccd && (
                  <p className="text-red-500 text-sm mt-1 font-medium">{errors.cccd}</p>
                )}
              </div>
            </div>

            {/* M·∫≠t kh·∫©u */}
            <div className="mb-4 flex items-start">
              <label className="w-32 text-gray-700 mt-3 font-medium">M·∫≠t kh·∫©u</label>
              <div className="flex-grow relative">
                <input
                  type={showPassword ? 'text' : 'password'}
                  name="password"
                  className={getInputClassName('password')}
                  placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
                  value={formData.password}
                  onChange={handleChange}
                />
                <button
                  type="button"
                  className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700 focus:outline-none"
                  onClick={() => setShowPassword(!showPassword)}
                >
                  {showPassword ? 'üîí' : 'üëÅÔ∏è'}
                </button>
                {errors.password && (
                  <p className="text-red-500 text-sm mt-1 font-medium">{errors.password}</p>
                )}
              </div>
            </div>

            {/* Qu√™n m·∫≠t kh·∫©u */}
            <div className="mb-4 flex justify-end">
              <a href="#" className="text-blue-700 hover:underline font-medium">
                Qu√™n m·∫≠t kh·∫©u?
              </a>
            </div>

            {/* Submit Button */}
            <div className="flex justify-center mt-6">
              <button
                type="submit"
                className="bg-[#0056B3] text-white py-3 px-8 rounded font-bold hover:bg-blue-800 w-48 transition duration-300 shadow-md hover:shadow-lg"
              >
                ƒêƒÇNG NH·∫¨P
              </button>
            </div>
          </form>
        </div>
      </div>

      {/* Footer */}
      <footer className="bg-[#0056B3] text-white py-8">
        <div className="max-w-6xl mx-auto px-4">
          <div className="grid grid-cols-2 md:grid-cols-5 gap-8">
            {/* C·ªôt 1: V·ªÅ ch√∫ng t√¥i */}
            <div>
              <h3 className="font-bold text-lg mb-3">V·ªÅ ch√∫ng t√¥i</h3>
              <ul className="space-y-2">
                <li><a href="#" className="text-sm text-white hover:underline">Gi·ªõi thi·ªáu</a></li>
                <li><a href="#" className="text-sm text-white hover:underline">C√°c tr∆∞·ªùng th√†nh vi√™n</a></li>
                <li><a href="#" className="text-sm text-white hover:underline">Tin t·ª©c & S·ª± ki·ªán</a></li>
                <li><a href="#" className="text-sm text-white hover:underline">Li√™n h·ªá</a></li>
              </ul>
            </div>

            {/* C·ªôt 2: K√¨ thi ƒêGNL */}
            <div>
              <h3 className="font-bold text-lg mb-3">K√¨ thi ƒêGNL</h3>
              <ul className="space-y-2">
                <li><a href="#" className="text-sm text-white hover:underline">Th√¥ng tin k·ª≥ thi</a></li>
                <li><a href="#" className="text-sm text-white hover:underline">L·ªãch thi</a></li>
                <li><a href="#" className="text-sm text-white hover:underline">C·∫•u tr√∫c ƒë·ªÅ thi</a></li>
                <li><a href="#" className="text-sm text-white hover:underline">Quy ch·∫ø thi</a></li>
              </ul>
            </div>

            {/* C·ªôt 3: X√©t tuy·ªÉn */}
            <div>
              <h3 className="font-bold text-lg mb-3">X√©t tuy·ªÉn</h3>
              <ul className="space-y-2">
                <li><a href="#" className="text-sm text-white hover:underline">Quy ch·∫ø x√©t tuy·ªÉn</a></li>
                <li><a href="#" className="text-sm text-white hover:underline">Ch·ªâ ti√™u tuy·ªÉn sinh</a></li>
                <li><a href="#" className="text-sm text-white hover:underline">ƒêi·ªÉm chu·∫©n tham kh·∫£o</a></li>
                <li><a href="#" className="text-sm text-white hover:underline">H∆∞·ªõng d·∫´n ƒëƒÉng k√Ω</a></li>
              </ul>
            </div>

            {/* C·ªôt 4: T√†i nguy√™n */}
            <div>
              <h3 className="font-bold text-lg mb-3">T√†i nguy√™n</h3>
              <ul className="space-y-2">
                <li><a href="#" className="text-sm text-white hover:underline">Th∆∞ vi·ªán s·ªë</a></li>
                <li><a href="#" className="text-sm text-white hover:underline">B√†i thi th·ª≠</a></li>
                <li><a href="#" className="text-sm text-white hover:underline">Di·ªÖn ƒë√†n h·ªçc t·∫≠p</a></li>
                <li><a href="#" className="text-sm text-white hover:underline">H·ªèi ƒë√°p th∆∞·ªùng g·∫∑p</a></li>
              </ul>
            </div>

            {/* C·ªôt 5: K·∫øt n·ªëi v·ªõi ch√∫ng t√¥i */}
            <div>
              <h3 className="font-bold text-lg mb-3">K·∫øt n·ªëi v·ªõi ch√∫ng t√¥i</h3>
              <div className="flex space-x-4">
                <a href="#" className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center hover:bg-gray-400">
                  <i className="fab fa-facebook-f text-[#0056B3]"></i>
                </a>
                <a href="#" className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center hover:bg-gray-400">
                  <i className="fab fa-twitter text-[#0056B3]"></i>
                </a>
              </div>
            </div>
          </div>

          {/* D√≤ng b·∫£n quy·ªÅn */}
          <div className="border-t border-blue-400 mt-6 pt-6 text-center text-sm text-white">
            ¬© 2025 VNUHCM-UNIGATE | C·ªïng th√¥ng tin tuy·ªÉn sinh th√¥ng minh ƒêHQG TP.HCM | ƒêƒÉng k√Ω b·∫£n quy·ªÅn.
          </div>
        </div>
      </footer>
    </div>
  );
}