import React, { useState } from 'react';
import { Link } from "react-router-dom";

export default function RegistrationForm() {
  // State ƒë·ªÉ l∆∞u d·ªØ li·ªáu form
  const [formData, setFormData] = useState({
    cccd: '',
    fullName: '',
    email: '',
    phone: '',
    password: '',
    confirmPassword: ''
  });

  // State ƒë·ªÉ ki·ªÉm so√°t hi·ªÉn th·ªã m·∫≠t kh·∫©u
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  // State cho checkbox
  const [agreeTerms, setAgreeTerms] = useState(false);
  const [notRobot, setNotRobot] = useState(false);

  // State ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o l·ªói
  const [errors, setErrors] = useState({});
  
  // State ƒë·ªÉ ki·ªÉm so√°t khi form ƒë∆∞·ª£c submit
  const [formSubmitted, setFormSubmitted] = useState(false);

  // H√†m x·ª≠ l√Ω thay ƒë·ªïi input
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value
    });
    
    // X√≥a l·ªói c·ªßa tr∆∞·ªùng v·ª´a ƒë∆∞·ª£c c·∫≠p nh·∫≠t n·∫øu form ƒë√£ ƒë∆∞·ª£c submit tr∆∞·ªõc ƒë√≥
    if (formSubmitted) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  // H√†m x·ª≠ l√Ω thay ƒë·ªïi checkbox
  const handleCheckboxChange = (e) => {
    const { name, checked } = e.target;
    if (name === 'agreeTerms') {
      setAgreeTerms(checked);
      if (formSubmitted && checked) {
        setErrors(prev => ({
          ...prev,
          agreeTerms: ''
        }));
      }
    } else if (name === 'notRobot') {
      setNotRobot(checked);
      if (formSubmitted && checked) {
        setErrors(prev => ({
          ...prev,
          notRobot: ''
        }));
      }
    }
  };

  // H√†m x√°c th·ª±c form
  const validateForm = () => {
    const newErrors = {};

    // Ki·ªÉm tra CCCD
    if (!formData.cccd) {
      newErrors.cccd = "Vui l√≤ng nh·∫≠p s·ªë CCCD";
    } else if (!/^\d{12}$/.test(formData.cccd)) {
      newErrors.cccd = "S·ªë CCCD ph·∫£i g·ªìm 12 ch·ªØ s·ªë v√† kh√¥ng ch·ª©a ch·ªØ c√°i";
    }

    // Ki·ªÉm tra h·ªç v√† t√™n
    if (!formData.fullName) {
      newErrors.fullName = "Vui l√≤ng nh·∫≠p h·ªç v√† t√™n";
    }

    // Ki·ªÉm tra email
    if (!formData.email) {
      newErrors.email = "Vui l√≤ng nh·∫≠p email";
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = "Email kh√¥ng h·ª£p l·ªá";
    }

    // Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i
    if (!formData.phone) {
      newErrors.phone = "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i";
    } else if (!/^\d{10}$/.test(formData.phone)) {
      newErrors.phone = "S·ªë ƒëi·ªán tho·∫°i ph·∫£i g·ªìm 10 ch·ªØ s·ªë";
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u
    if (!formData.password) {
      newErrors.password = "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u";
    } else if (formData.password.length < 8) {
      newErrors.password = "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±";
    } else if (/[ƒÉ√¢√™√¥∆°∆∞ƒë√°√†·∫£√£·∫°·∫•·∫ß·∫©·∫´·∫≠·∫Ø·∫±·∫≥·∫µ·∫∑√©√®·∫ª·∫Ω·∫π·∫ø·ªÅ·ªÉ·ªÖ·ªá√≠√¨·ªâƒ©·ªã√≥√≤·ªè√µ·ªç·ªë·ªì·ªï·ªó·ªô·ªõ·ªù·ªü·ª°·ª£√∫√π·ªß≈©·ª•·ª©·ª´·ª≠·ªØ·ª±√Ω·ª≥·ª∑·ªπ·ªµ]/i.test(formData.password)) {
      newErrors.password = "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ch·ª©a c√°c k√Ω t·ª± ti·∫øng Vi·ªát c√≥ d·∫•u";
    }

    // Ki·ªÉm tra x√°c nh·∫≠n m·∫≠t kh·∫©u
    if (!formData.confirmPassword) {
      newErrors.confirmPassword = "Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u";
    } else if (formData.password !== formData.confirmPassword) {
      newErrors.confirmPassword = "M·∫≠t kh·∫©u kh√¥ng kh·ªõp";
    }

    // Ki·ªÉm tra checkbox ƒëi·ªÅu kho·∫£n
    if (!agreeTerms) {
      newErrors.agreeTerms = "B·∫°n ph·∫£i ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n s·ª≠ d·ª•ng";
    }

    // Ki·ªÉm tra checkbox kh√¥ng ph·∫£i robot
    if (!notRobot) {
      newErrors.notRobot = "Vui l√≤ng x√°c nh·∫≠n b·∫°n kh√¥ng ph·∫£i l√† robot";
    }

    return newErrors;
  };

  // H√†m x·ª≠ l√Ω submit form
  const handleSubmit = (e) => {
    e.preventDefault();
    setFormSubmitted(true);
    const validationErrors = validateForm();
    
    if (Object.keys(validationErrors).length === 0) {
      // X·ª≠ l√Ω ƒëƒÉng k√Ω th√†nh c√¥ng
      alert('ƒêƒÉng k√Ω th√†nh c√¥ng!');
      console.log('Form data submitted:', formData);
      // Reset form sau khi ƒëƒÉng k√Ω th√†nh c√¥ng
      setFormData({
        cccd: '',
        fullName: '',
        email: '',
        phone: '',
        password: '',
        confirmPassword: ''
      });
      setAgreeTerms(false);
      setNotRobot(false);
      setFormSubmitted(false);
      // ·ªû ƒë√¢y b·∫°n c√≥ th·ªÉ g·ª≠i API request ƒë·∫øn server
    } else {
      setErrors(validationErrors);
    }
  };

  // Quy·∫øt ƒë·ªãnh class cho input fields
  const getInputClassName = (fieldName) => {
    return `w-full p-3 rounded ${
      errors[fieldName] 
        ? 'border-2 border-red-500 bg-red-50 text-red-700' 
        : 'border border-gray-300 bg-white text-gray-800'
    } focus:ring-2 focus:ring-blue-500 focus:border-transparent`;
  };

  return (
    <div className="flex flex-col min-h-screen">
      <header className="bg-[#0056B3] text-white px-6 py-4 flex justify-between items-center">
        <div className="font-bold text-lg">VNUHCM - UNIGATE</div>
        <div className="font-bold text-lg flex-grow text-center">ƒêƒÇNG K√ç T√ÄI KHO·∫¢N</div>
        <div>
          <Link to="/" className="text-white hover:underline">
            ƒê√£ c√≥ t√†i kho·∫£n? ƒêƒÉng nh·∫≠p
          </Link>
        </div>
      </header>

      {/* Form Container */}
      <div className="flex-grow">
        <div className="max-w-3xl mx-auto my-6 bg-blue-50 p-8 rounded shadow-md w-full">
          <form onSubmit={handleSubmit}>
            {/* CCCD */}
            <div className="mb-4 flex items-start">
              <label className="w-32 text-gray-700 mt-3 font-medium">S·ªë CCCD</label>
              <div className="flex-grow">
                <input
                  type="text"
                  name="cccd"
                  className={getInputClassName('cccd')}
                  placeholder="Nh·∫≠p s·ªë CCCD"
                  value={formData.cccd}
                  onChange={handleChange}
                />
                {errors.cccd && <p className="text-red-500 text-sm mt-1 font-medium">{errors.cccd}</p>}
              </div>
            </div>

            {/* H·ªç v√† t√™n */}
            <div className="mb-4 flex items-start">
              <label className="w-32 text-gray-700 mt-3 font-medium">H·ªç v√† t√™n</label>
              <div className="flex-grow">
                <input
                  type="text"
                  name="fullName"
                  className={getInputClassName('fullName')}
                  placeholder="Nh·∫≠p h·ªç v√† t√™n"
                  value={formData.fullName}
                  onChange={handleChange}
                />
                {errors.fullName && <p className="text-red-500 text-sm mt-1 font-medium">{errors.fullName}</p>}
              </div>
            </div>

            {/* Email */}
            <div className="mb-4 flex items-start">
              <label className="w-32 text-gray-700 mt-3 font-medium">Email</label>
              <div className="flex-grow">
                <input
                  type="email"
                  name="email"
                  className={getInputClassName('email')}
                  placeholder="Nh·∫≠p email"
                  value={formData.email}
                  onChange={handleChange}
                />
                {errors.email && <p className="text-red-500 text-sm mt-1 font-medium">{errors.email}</p>}
              </div>
            </div>

            {/* S·ªë ƒëi·ªán tho·∫°i */}
            <div className="mb-4 flex items-start">
              <label className="w-32 text-gray-700 mt-3 font-medium">S·ªë ƒëi·ªán tho·∫°i</label>
              <div className="flex-grow">
                <input
                  type="tel"
                  name="phone"
                  className={getInputClassName('phone')}
                  placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                  value={formData.phone}
                  onChange={handleChange}
                />
                {errors.phone && <p className="text-red-500 text-sm mt-1 font-medium">{errors.phone}</p>}
              </div>
            </div>

            {/* M·∫≠t kh·∫©u */}
            <div className="mb-4 flex items-start">
              <label className="w-32 text-gray-700 mt-3 font-medium">M·∫≠t kh·∫©u</label>
              <div className="flex-grow relative flex items-center">
                <input
                  type={showPassword ? "text" : "password"}
                  name="password"
                  className={getInputClassName("password")}
                  placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
                  value={formData.password}
                  onChange={handleChange}
                />
                <button
                  type="button"
                  className="ml-3 text-gray-500 hover:text-gray-700 focus:outline-none"
                  onClick={() => setShowPassword(!showPassword)}
                >
                  {showPassword ? "üîí" : "üëÅÔ∏è"}
                </button>
              </div>
            </div>

            {/* X√°c nh·∫≠n m·∫≠t kh·∫©u */}
            <div className="mb-4 flex items-start">
              <label className="w-32 text-gray-700 mt-3 font-medium">X√°c nh·∫≠n m·∫≠t kh·∫©u</label>
              <div className="flex-grow relative flex items-center">
                <input
                  type={showConfirmPassword ? "text" : "password"}
                  name="confirmPassword"
                  className={getInputClassName("confirmPassword")}
                  placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
                  value={formData.confirmPassword}
                  onChange={handleChange}
                />
                <button
                  type="button"
                  className="ml-3 text-gray-500 hover:text-gray-700 focus:outline-none"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                >
                  {showConfirmPassword ? "üîí" : "üëÅÔ∏è"}
                </button>
              </div>
            </div>

            {/* Checkbox ƒêi·ªÅu kho·∫£n */}
            <div className="mb-1 ml-32 flex items-center">
              <input
                type="checkbox"
                id="agreeTerms"
                name="agreeTerms"
                className={`mr-2 h-5 w-5 rounded border ${errors.agreeTerms ? 'border-2 border-red-500' : 'border-gray-300'}`}
                checked={agreeTerms}
                onChange={handleCheckboxChange}
              />
              <label htmlFor="agreeTerms" className="text-gray-800">
                T√¥i ƒë·ªìng √Ω v·ªõi{' '}
                <a href="#" className="text-blue-700 hover:underline font-medium">ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng</a>{' '}
                v√†{' '}
                <a href="#" className="text-blue-700 hover:underline font-medium">Ch√≠nh s√°ch b·∫£o m·∫≠t</a>
              </label>
            </div>
            {errors.agreeTerms && <p className="text-red-500 text-sm ml-32 mb-4 font-medium">{errors.agreeTerms}</p>}

            {/* Checkbox Not Robot */}
            <div className="mb-1 ml-32 flex items-center">
              <input
                type="checkbox"
                id="notRobot"
                name="notRobot"
                className={`mr-2 h-5 w-5 rounded border ${errors.notRobot ? 'border-2 border-red-500' : 'border-gray-300'}`}
                checked={notRobot}
                onChange={handleCheckboxChange}
              />
              <label htmlFor="notRobot" className="text-gray-800">T√¥i kh√¥ng ph·∫£i l√† robot</label>
            </div>
            {errors.notRobot && <p className="text-red-500 text-sm ml-32 mb-4 font-medium">{errors.notRobot}</p>}

            {/* Submit Button */}
            <div className="flex justify-center mt-6">
              <button
                type="submit"
                className="bg-[#0056B3] text-white py-3 px-8 rounded font-bold hover:bg-blue-800 w-48 transition duration-300 shadow-md hover:shadow-lg"
              >
                ƒêƒÇNG K√ç
              </button>
            </div>
          </form>
        </div>
      </div>

      {/* Footer - Updated */}
      <footer className="bg-[#0056B3] text-white py-8">
        <div className="max-w-6xl mx-auto px-4">
          <div className="grid grid-cols-2 md:grid-cols-5 gap-8">
            {/* C·ªôt 1: V·ªÅ ch√∫ng t√¥i */}
            <div>
              <h3 className="font-bold text-lg mb-3">V·ªÅ ch√∫ng t√¥i</h3>
              <ul className="space-y-2">
                <li><a href="#" className="text-sm text-white hover:underline">Gi·ªõi thi·ªáu</a></li>
                <li><a href="#" className="text-sm text-white hover:underline">C√°c tr∆∞·ªùng th√†nh vi√™n</a></li>
                <li><a href="#" className="text-sm text-white hover:underline">Tin t·ª©c & S·ª± ki·ªán</a></li>
                <li><a href="#" className="text-sm text-white hover:underline">Li√™n h·ªá</a></li>
              </ul>
            </div>

            {/* C·ªôt 2: K√¨ thi ƒêGNL */}
            <div>
              <h3 className="font-bold text-lg mb-3">K√¨ thi ƒêGNL</h3>
              <ul className="space-y-2">
                <li><a href="#" className="text-sm text-white hover:underline">Th√¥ng tin k·ª≥ thi</a></li>
                <li><a href="#" className="text-sm text-white hover:underline">L·ªãch thi</a></li>
                <li><a href="#" className="text-sm text-white hover:underline">C·∫•u tr√∫c ƒë·ªÅ thi</a></li>
                <li><a href="#" className="text-sm text-white hover:underline">Quy ch·∫ø thi</a></li>
              </ul>
            </div>

            {/* C·ªôt 3: X√©t tuy·ªÉn */}
            <div>
              <h3 className="font-bold text-lg mb-3">X√©t tuy·ªÉn</h3>
              <ul className="space-y-2">
                <li><a href="#" className="text-sm text-white hover:underline">Quy ch·∫ø x√©t tuy·ªÉn</a></li>
                <li><a href="#" className="text-sm text-white hover:underline">Ch·ªâ ti√™u tuy·ªÉn sinh</a></li>
                <li><a href="#" className="text-sm text-white hover:underline">ƒêi·ªÉm chu·∫©n tham kh·∫£o</a></li>
                <li><a href="#" className="text-sm text-white hover:underline">H∆∞·ªõng d·∫´n ƒëƒÉng k√Ω</a></li>
              </ul>
            </div>

            {/* C·ªôt 4: T√†i nguy√™n */}
            <div>
              <h3 className="font-bold text-lg mb-3">T√†i nguy√™n</h3>
              <ul className="space-y-2">
                <li><a href="#" className="text-sm text-white hover:underline">Th∆∞ vi·ªán s·ªë</a></li>
                <li><a href="#" className="text-sm text-white hover:underline">B√†i thi th·ª≠</a></li>
                <li><a href="#" className="text-sm text-white hover:underline">Di·ªÖn ƒë√†n h·ªçc t·∫≠p</a></li>
                <li><a href="#" className="text-sm text-white hover:underline">H·ªèi ƒë√°p th∆∞·ªùng g·∫∑p</a></li>
              </ul>
            </div>

            {/* C·ªôt 5: K·∫øt n·ªëi v·ªõi ch√∫ng t√¥i */}
            <div>
              <h3 className="font-bold text-lg mb-3">K·∫øt n·ªëi v·ªõi ch√∫ng t√¥i</h3>
              <div className="flex space-x-4">
                <a href="#" className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center hover:bg-gray-400">
                  <i className="fab fa-facebook-f text-[#0056B3]"></i>
                </a>
                <a href="#" className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center hover:bg-gray-400">
                  <i className="fab fa-twitter text-[#0056B3]"></i>
                </a>
              </div>
            </div>
          </div>

          {/* D√≤ng b·∫£n quy·ªÅn */}
          <div className="border-t border-blue-400 mt-6 pt-6 text-center text-sm text-white">
            ¬© 2025 VNUHCM-UNIGATE | C·ªïng th√¥ng tin tuy·ªÉn sinh th√¥ng minh ƒêHQG TP.HCM | ƒêƒÉng k√Ω b·∫£n quy·ªÅn.
          </div>
        </div>
      </footer>
    </div>
  );
}